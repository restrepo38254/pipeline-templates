parameters:
  - name: applicationName
    type: string   
  - name: repositoryName
    type: string
  - name: awsCredentials
    type: string
  - name: ecsClusterName
    type: string
  - name: ecsServiceName
    type: string
  - name: dockerArgumentsString
    type: string
    default: ''
  - name: containerImage
    type: string
    default: 'gradle:7-jdk17'
  - name: gradletask
    type: string
    default: 'war'
  - name: buildPath
    type: string
  - name: previousStage
    type: string
  - name: sourceFolder
    type: string
    default: '$(System.DefaultWorkingDirectory)/dist/'
  - name: workingDirectory
    type: string
    default: '$(System.DefaultWorkingDirectory)'
  - name: dockerfileName
    type: string
    default: 'Dockerfile'
  - name: customBuildFolder
    type: string
  - name: npmauth
    type: boolean
    default: true
  - name: replaceTokens
    type: boolean
    default: false
  - name: replaceTokenTarget
    type: string
    default: ''

stages:
  - stage: 'Deploy'
    condition: and(not(or(failed(), canceled())), not(eq(variables['Build.Reason'], 'PullRequest')), or(contains(variables['Build.SourceBranch'], 'dev'), contains(variables['Build.SourceBranch'], 'qa'), contains(variables['Build.SourceBranch'], 'master'), contains(variables['Build.SourceBranch'], 'feature'), contains(variables['Build.SourceBranch'], 'hotfix'), contains(variables['Build.SourceBranch'], 'release')))
    displayName: 'Deploy'
    dependsOn: ${{ parameters.previousStage }}
    # pool:
    #   name: NovaventaTest
    jobs:
        - job: Build
          variables:
            GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
          container: 
            image: ${{parameters.containerImage}}
            volumes:
              - gradle:/root/.gradle
          workspace:
            clean: all
          steps:
          - task: NodeAndNpmTool@1
            inputs:
              versionSpec: '10.x'
            displayName: Install node
          # - task: Cache@2
          #   inputs:
          #     key: 'gradle | "$(Agent.OS)"' # Swap build.gradle.kts for build.gradle when using Groovy
          #     restoreKeys: |
          #       gradle | "$(Agent.OS)"
          #       gradle
          #     path: $(GRADLE_USER_HOME)
          #   displayName: Configure gradle caching
          - task: MavenAuthenticate@0
            displayName: 'Maven Authenticate'
            inputs:
              artifactsFeeds: Novaventa
          - ${{ if eq(parameters.npmauth, 'true') }}:
            - task: npmAuthenticate@0
              displayName: 'npm Authenticate'
              inputs:
                workingFile: '${{parameters.customBuildFolder}}/.npmrc'
          - task: DownloadSecureFile@1
            inputs:
              secureFile: '${{parameters.applicationName}}-$(Build.SourceBranchName)-sf.json'
            displayName: 'dowloading ${{parameters.applicationName}}-$(Build.SourceBranchName)-sf.json' 
          - task: CopyFiles@2
            displayName: 'Copy Files to: $(System.DefaultWorkingDirectory)'
            inputs:
              SourceFolder: '$(Agent.TempDirectory)'
              Contents: '${{parameters.applicationName}}-$(Build.SourceBranchName)-sf.json'
              TargetFolder: '$(System.DefaultWorkingDirectory)'
          
          - task: replacetokens@6
            displayName: 'Set files'
            inputs:
              sources: ${{parameters.replaceTokenTarget}}
              encoding: 'auto'
              tokenPattern: 'default'
              addBOM: true
              missingVarLog: 'warn'
              missingVarAction: keep
              ifNoFilesFound: 'warn'
              additionalVariables: '@**/*.json'
              transforms: false
              recursive: false
              telemetryOptout: true
          - task: Gradle@3
            inputs:
              gradleWrapperFile: 'gradlew'
              workingDirectory: ${{ parameters.workingDirectory }}
              tasks: ${{ parameters.gradletask }}
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              sonarQubeRunAnalysis: false
              spotBugsAnalysis: false
              # options: '--build-cache'
            displayName: Build project
          # - script: |   
          #     # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
          #     ./gradlew --stop    
          #   displayName: Build
          # - task: DockerInstaller@0
          #   inputs:
          #    dockerVersion: '17.09.0-ce'
          #    displayName: Docker Install
          # - task: CopyFiles@2
          #   inputs:
          #     contents: './build/libs/**'
          #     targetFolder: $(Build.ArtifactStagingDirectory)
          - publish: '${{ parameters.buildPath }}'
            artifact: Build
        - job: PushImageReloadECSService
          dependsOn: Build
          workspace:
            clean: all
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              source: current
              artifact: Build
              path: '${{ parameters.buildPath }}'
          - task: Docker@2
            displayName: Build docker image
            inputs:
              repository: ${{ parameters.repositoryName }}
              command: 'build'
              Dockerfile: ${{ parameters.dockerfileName }}
              tags: |
                $(Build.BuildNumber)
                latest
              arguments: '${{ parameters.dockerArgumentsString }}'
          - task: ECRPushImage@1
            inputs:
              awsCredentials: ${{ parameters.awsCredentials }}
              regionName: 'us-east-1'
              imageSource: 'imagename'
              sourceImageName: ${{ parameters.repositoryName }}
              repositoryName: ${{ parameters.repositoryName }}
              pushTag: '$(Build.BuildNumber)'
            displayName: Upload image to ECR ($(Build.BuildNumber))
            
          - task: ECRPushImage@1
            inputs:
              awsCredentials: ${{ parameters.awsCredentials }}
              regionName: 'us-east-1'
              imageSource: 'imagename'
              sourceImageName: ${{ parameters.repositoryName }}
              repositoryName: ${{ parameters.repositoryName }}
              pushTag: 'latest'
            displayName: Upload image to ECR
          - task: AWSCLI@1
            displayName: Reload ECS service
            inputs:
              awsCredentials: ${{ parameters.awsCredentials }}
              regionName: 'us-east-1'
              awsCommand: 'ecs'
              awsSubCommand: 'update-service'
              awsArguments: '--cluster ${{ parameters.ecsClusterName }} --service ${{ parameters.ecsServiceName }} --force-new-deployment'