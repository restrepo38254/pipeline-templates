# Authority: Alejandro Cadena - DevOps Engineer - XpertGroup SAS
# Everything wrote in this file has been made to work and be compatible with all Novaventa projects (as long as it's been possible).
# This template is currently on use on pipeline 3812-mdr-java > azure-pipeline-ec2.yml
parameters:
  # Mandatory parameters
  - name: applicationName
    type: string
  - name: artifactName
    type: string
  - name: awsAccountEnvironment
    type: string
 #   default: no013
 #   values:
 #     - nox012
 #     - nox013
 #     - no012
 #     - no013
  - name: env
    type: string
  # Optional parameters
  - name: replaceToRoot
    type: string
    default: "true"
  - name: agentPool
    type: string
    default: Novaventa2
  - name: availabilityZones
    type: object
    default:
    - a
  - name: targetFolder
    type: string
    default: './cicd'
  - name: tomcatService
    type: string
    default: 'tomcat.service'
  - name: tomcatFolder
    type: string
    default: 'tomcat'

jobs:
  - deployment: Deploy
    dependsOn: Build
    environment: ${{ parameters.awsAccountEnvironment }}-${{ parameters.applicationName }}
    condition: succeeded()
    cancelTimeoutInMinutes: 0
    pool: 
      name: ${{ parameters.agentPool }}
    strategy:
      runOnce:
        deploy:
          steps:
            # This task has such script because we need to check if we want to copy the war as ROOT.
            # If so, it will copy it as ROOT and delete the previous ROOT folder created.
            # If doesn't, it will need to get the .war file name (without the full path or the .war extension) and then copy it to the corresponding path and delete the corresponding previous folder.
            # "sudo" prefix is needed in order to make changes directly to protected folders, need to check in a near future if this can be replaced with plain commands, without invoking sudo.\
            - ${{if ne(length(join('', parameters.availabilityZones)), 1)}}:
              - ${{each zone in parameters.availabilityZones}}:
                - task: SSH@0
                  inputs:
                    sshEndpoint: 'sc-${{parameters.awsAccountEnvironment}}-ssh-${{parameters.applicationName}}-${{parameters.env}}-${{zone}}'
                    runOptions: 'inline'
                    inline: |
                      for file in ${{parameters.targetFolder}}/*.war; do
                        if [[ '${{ parameters.replaceToRoot }}' == 'true' ]]; then
                          sudo systemctl stop ${{parameters.tomcatService}}
                          sudo cp $file /usr/share/${{parameters.tomcatFolder}}/webapps/ROOT.war
                          sudo rm -rf /usr/share/${{parameters.tomcatFolder}}/webapps/ROOT
                          sudo systemctl start ${{parameters.tomcatService}}
                        else
                          sudo systemctl stop ${{parameters.tomcatService}}
                          filePathSplitted=(${file//// })
                          fileName=${filePathSplitted[-1]}
                          warName=${fileName::-4}
                          sudo cp $file "/usr/share/${{parameters.tomcatFolder}}/webapps/"$warName".war"
                          sudo rm -rf "/usr/share/${{parameters.tomcatFolder}}/webapps/"$warName
                          sudo systemctl start ${{parameters.tomcatService}}
                        fi
                      done
                    readyTimeout: '20000'
                  displayName: Updating .war file to ${{parameters.tomcatFolder}} folder (${{zone}})
            - ${{else}}:
              - task: SSH@0
                inputs:
                  sshEndpoint: 'sc-${{parameters.awsAccountEnvironment}}-ssh-${{parameters.applicationName}}-${{parameters.env}}'
                  runOptions: 'inline'
                  inline: |
                    for file in ${{parameters.targetFolder}}/*.war; do
                      if [[ '${{ parameters.replaceToRoot }}' == 'true' ]]; then
                        sudo systemctl stop ${{parameters.tomcatService}}
                        sudo cp $file /usr/share/${{parameters.tomcatFolder}}/webapps/ROOT.war
                        sudo rm -rf /usr/share/${{parameters.tomcatFolder}}/webapps/ROOT
                        sudo systemctl start ${{parameters.tomcatService}}
                      else
                        sudo systemctl stop ${{parameters.tomcatService}}
                        filePathSplitted=(${file//// })
                        fileName=${filePathSplitted[-1]}
                        warName=${{parameters.artifactName}}
                        sudo cp $file "/usr/share/${{parameters.tomcatFolder}}/webapps/"$warName".war"
                        sudo rm -rf "/usr/share/${{parameters.tomcatFolder}}/webapps/"$warName
                        sudo systemctl start ${{parameters.tomcatService}}
                      fi
                    done
                  readyTimeout: '20000'
                displayName: Updating .war file to ${{parameters.tomcatFolder}} folder