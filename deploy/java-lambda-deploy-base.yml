parameters: 
    - name: lambdaName
      type: string
    - name: serviceConnectionName
      type: string
    - name: applicationName
      type: string
    - name: awsAccountEnvironment
      type: string
    - name: artifactName
      type: string
    - name: pipelineArtifactName
      type: string
      default: 'Build'
    - name: artifactFolder 
      type: string
    - name: s3Folder
      type: string
    - name: filesToUpload
      type: string
      default: '**'
    - name: runtime
      type: string
    - name: functionHandler
      type: string
    - name: agentPool
      type: string
      default: 'Novaventa2'
    - name: previousJob
      type: string
      default: ''

jobs:
  - deployment: Deploy
    dependsOn: ${{ parameters.previousJob }}
    environment: ${{ parameters.awsAccountEnvironment }}-${{ parameters.applicationName }}
    condition: succeeded()
    cancelTimeoutInMinutes: 0
    pool: 
      name: ${{parameters.agentPool}}
    strategy:
      runOnce:
        deploy:
          steps: 
            - download: none
# upload .zip file to s3 bucket and update lambda code from the same bucket
            - task: DownloadPipelineArtifact@2
              inputs:
                source: current
                artifact: ${{ parameters.pipelineArtifactName }}
                path: './target'

            - task: S3Upload@1
              inputs:
                awsCredentials: '${{ parameters.serviceConnectionName }}'
                regionName: 'us-east-1'
                bucketName: '${{ parameters.s3Folder }}'
                sourceFolder: '${{ parameters.artifactFolder }}'
                globExpressions: '${{ parameters.filesToUpload }}'
                createBucket: true

            - task: LambdaDeployFunction@1
              inputs:
                awsCredentials: '${{ parameters.serviceConnectionName }}'
                regionName: 'us-east-1'
                deploymentMode: 'codeonly'
                functionName: '${{ parameters.lambdaName }}'
                #functionHandler: '${{ parameters.functionHandler }}'
                codeLocation: 's3object'
                s3Bucket: '${{ parameters.s3Folder }}'
                s3ObjectKey: '${{ parameters.artifactName }}'
                #runtime: '${{ parameters.runtime }}'

                



      
    